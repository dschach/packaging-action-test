# Unique name for this workflow
name: Gen2 Packaging
on:
  release:
    types: [released]
  workflow_dispatch:
  push:
    branches:
      - main

# Jobs to be executed
jobs:
  parse-config:
    runs-on: ubuntu-latest
    outputs:
      sfdxpackage: ${{ steps.parse-package.outputs.packageJson }}
    permissions:
      contents: write
    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v4
        with:
          ref: 'main'
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      #      - name: 'Install npm dependencies'
      #        #if: steps.cache-npm.outputs.cache-hit != 'true'
      #        run: npm ci
      - name: 'Release Please Action Placeholder'
        id: release-please
        run: |
          echo "major=1" >> $GITHUB_OUTPUT
          echo "minor=1" >> $GITHUB_OUTPUT
          echo "patch=1" >> $GITHUB_OUTPUT
      - name: 'Parse sfdx-package.json'
        id: parse-package
        shell: bash
        run: |
          content=cat sfdx-project.json
          # the following lines are only required for multi line json
          #content="${content//'%'/''}"
          #content="${content//$'\n'/''}"
          #content="${content//$'\r'/''}"
          # TODO: Check if namespace exists. If not, send empty string
          # end of optional handling for multi line json
          echo "packageJson=$content" >> $GITHUB_OUTPUT
          echo "$packageJson"
          namespace=$($content | jq '.namespace')
          echo "namespace=$namespace" >> $GITHUB_OUTPUT
          echo "$namespace"

      - name: 'Verify output'
        id: verify-output
        run: |
          echo "Namespace is ${{steps.parse-package.outputs.namespace}}""
          echo "Project is ${{ steps.parse-package.outputs.packageJson}}""
          sed -i -E "s,${{ steps.parse-package.outputs.namespace}},${{ steps.parse-package.outputs.namespace}}2," sfdx-project.json
          #Update sfdx-project.json
      - name: 'Upload Package Version'
        id: package-version
        run: |
          echo "new version created"
          echo "packageVersionId=04t3a0000001234AAC" >> $GITHUB_OUTPUT

      - name: 'Update README URLs'
        id: update-readme
        run: |
          prodInstallLink="https://login.salesforce.com/packaging/installPackage.apexp?p0=${{steps.package-version.outputs.packageVersionId}}"
          testInstallLink="https://test.salesforce.com/packaging/installPackage.apexp?p0=${{steps.package-version.outputs.packageVersionId}}"
          prodInstallRegex="https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-Z0-9]{18}"
          testInstallRegex="https:\/\/test\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-Z0-9]{18}"
          sed -E -i "s,${prodInstallRegex},${prodInstallLink}," README.md
          sed -E -i "s,${testInstallRegex},${testInstallLink}," README.md
          # TODO: Run Prettier
      - name: 'Update ApexDox'
        id: update-apex-dox
        run: |
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git config user.name "${{ github.repository_owner }}"
          git add README.md
          git add sfdx-project.json
      - name: 'Check changed files'
        id: count-changes
        run: |
          git diff --name-only > changed.txt
          changes=$(wc -l "./changed.txt" | awk '{print $1}')
          echo "changes=$changes" >> $GITHUB_OUTPUT
          if [ $changes == 0 ]; then
              echo "No files changed.";
          fi
          if [ $changes > 0 ]; then
              git add .
          rm changed.txt
      - name: 'Commit changes'
        id: auto-commit-action
        if: steps.count-changes.outputs.changes > 0
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Created new package version'
          #file_pattern: sfdx-project.json
      - name: 'Run if changes have been detected'
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        run: echo "Changes!"

      - name: 'Run if no changes have been detected'
        if: steps.auto-commit-action.outputs.changes_detected == 'false'
        run: echo "No Changes!"
